- name: Get instance information
  ec2_instance_info:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    filters:
      "tag:Name": "{{ ec2_copy_image['src'] }}"
      "tag:aws:cloudformation:stack-name": "{{ ec2_copy_image['stack'] | default(omit) }}"
      
#      instance-state-name: [ "running"]
  register: ec2_instance

- name: Stop VM instances
  ec2_instance:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    state: stopped
    instance_ids: ["{{ ec2_instance.instances[0].instance_id }}"]

- name: Check if the AMI exists
  ec2_ami_info:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    filters:
      name: "{{ ec2_copy_image['dest'] }}"
  register: r_ec2_ami_info

- name: Delete AMI if it exists
  ec2_ami:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    wait: yes
    image_id: "{{ r_ec2_ami_info.images.0.image_id }}"
    state: absent
  when: "{{ r_ec2_ami_info.images | length }}"

- name: Create AMI from instance
  ec2_ami:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    instance_id: "{{ ec2_instance.instances[0].instance_id }}"
    wait: yes
    name: "{{ ec2_copy_image['dest'] }}"
    wait_timeout: 3600
    tags:
      private_ip_address: "{{ ec2_instance.instances[0].private_ip_address}}"
  register: r_ec2_ami

- debug: var=item
  loop: "{{ ec2_instance.instances.0.tags | product(copy_tags_prefix|default([])) | list}}"

- name: Copy tags from instance to AMI
  ec2_tag:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    resource: "{{ r_ec2_ami.image_id }}" 
    tags: "{{ {item[0]: ec2_instance.instances.0.tags[item[0]]} }}"
  when: copy_tags_prefix|default(False) and item[0].startswith(item[1])
  loop: "{{ ec2_instance.instances.0.tags | product(copy_tags_prefix|default([])) | list}}"

