# Implement your Workload deployment tasks here
- name: Setting up rosa client
  debug:
    msg: "Setting up rosa client"

- name: Does ROSA client already exist here
  ansible.builtin.stat:
    path: /usr/local/bin/rosa
  register: r_rosa_file_stat

- name: Get ROSA CLI if missing or not executable
  when: not r_rosa_file_stat.stat.executable
  block:

  - name: Get ROSA CLI
    ansible.builtin.get_url:
      url: "{{ rosa_installer_url }}"
      dest: /tmp/rosa-linux.tar.gz
      validate_certs: false
      mode: 0660
    register: r_rosa_cli_get
    retries: 12
    delay: 5
    until: r_rosa_cli_get is success

  - name: Unzip rosa-linux.tar.gz
    unarchive:
      src: /tmp/rosa-linux.tar.gz
      dest: /usr/local/bin/
      remote_src: true
    become: true

  - name: cleanup archive file
    file:
      path: "{{ item }}"
      state: absent
    loop:
      - /tmp/rosa-linux.tar.gz

# create for desired user
# on bastion, probably student_name
# on controller, whatever.

- name: Run rosa tasks as rosa_user "{{ rosa_user }}"
  become_user: "{{ rosa_user }}"
  become: true
  block:
    - name: Create .aws directory
      file:
        path: ~/.aws
        state: directory

    - name: Add aws credentials
      no_log: true
      blockinfile:
        path: ~/.aws/credentials
        create: true
        mode: 0600
        marker: "# <!-- {mark} ANSIBLE MANAGED BLOCK (rosa profile) -->"
        insertafter: EOF
        block: |-
          [default]
          aws_access_key_id={{ sandbox_aws_access_key_id }}
          aws_secret_access_key={{ sandbox_aws_secret_access_key }}

    - name: Add aws config
      blockinfile:
        path: ~/.aws/config
        create: true
        marker: "# <!-- {mark} ANSIBLE MANAGED BLOCK (rosa profile region) -->"
        insertafter: EOF
        mode: 0600
        block: |-
          [default]
          region={{ aws_region }}

    - name: Set up .bashrc
      no_log: true
      lineinfile:
        path: ~/.bashrc
        regexp: 'EOF'
        line: "{{ item }}"
      loop:
        - export ROSA_TOKEN={{ rosa_token }}
        - source <(rosa completion)

    - name: Log into ROSA
      command: "/usr/local/bin/rosa login --token {{ rosa_token }}"

    - name: Init AWS account for ROSA
      command: "/usr/local/bin/rosa init --profile rosa"

    - name: Verify permissions for ROSA
      command: "/usr/local/bin/rosa verify permissions --profile rosa"

    - name: Verify quota for ROSA
      command: "/usr/local/bin/rosa verify quota --profile rosa"

# save to output_dir
    - name: Set ROSA ocm fact
      ansible.builtin.set_fact:
        rosa_ocm_path: '~/.config/ocm/ocm.json'

    - name: Does ROSA .config/ocm directory exist?
      ansible.builtin.stat:
        path: "{{ rosa_ocm_path }}"
      register: r_gcm_file_stat

    - name: Get ROSA CLI if missing or not executable
      when: r_gcm_file_stat.stat.exists
      block:

        - name: Create a tar.gz archive of a the .config/gcm.json file
          when:
          ansible.builtin.copy:
            src: "{{ rosa_ocm_path }}"
            dest: "{{ output_dir }}/{{ rosa_ocm_path }}"
